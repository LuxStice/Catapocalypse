// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateNoise
#include "Assets/Code/Terrain/FastNoiseLite.hlsl"

struct NoiseLayer
{
    float2 scale;
    float2 offset;
    int octaves;
    float frequency;
    float amplitude;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Result;

StructuredBuffer<NoiseLayer> layers;
int layerCount = 0;

int2 textureSize;

[numthreads(8,8,1)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    float result = 1;
    
    for (int i = 0; i < layerCount; i++)
    {
        NoiseLayer layer = layers[i];
        
        float2 uv = (id.xy + layer.offset) / layer.scale;
    
        fnl_state noise = fnlCreateState();
        noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
        //noise.octaves = layer.octaves;
        //noise.frequency = layer.frequency;
        //noise.gain = layer.amplitude;
    
        result *= fnlGetNoise2D(noise, uv.x, uv.y);
    }

    Result[id.xy] = result;
}
