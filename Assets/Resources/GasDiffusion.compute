#pragma kernel CSMain

StructuredBuffer<int2> grid;
StructuredBuffer<float> concentration;
struct GasDescriptor;
StructuredBuffer<GasDescriptor> gasDescriptors;
RWStructuredBuffer<float> nextConcentration;

StructuredBuffer<int> ActiveMask;
StructuredBuffer<int> ObstacleMask;

int width;
float deltaTime;

struct GasDescriptor
{
    int id;
    double diffusivity;
    double concentration;
};

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.y * width + id.x;
    if (ActiveMask[index] == 0) return;

    GasDescriptor currentGas = gasDescriptors[index];

    float sum = 0;
    int count = 0;

    int2 offsets[4] = { int2(-1,0), int2(1,0), int2(0,-1), int2(0,1) };

    for (int i = 0; i < 4; i++) {
        int2 neighborPos = grid[index] + offsets[i];
        int ni = neighborPos.y * width + neighborPos.x;
        if (ObstacleMask[ni] == 1) continue;
        sum += gasDescriptors[ni].concentration;
        count++;
    }

    float laplacian = (sum - count * currentGas.concentration);
    float delta = currentGas.diffusivity * laplacian;
    nextConcentration[index] = currentGas.concentration + delta * deltaTime;
}